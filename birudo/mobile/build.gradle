import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.grgit.Grgit

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'play'


def isTravis = "true".equals(System.getenv("TRAVIS"))

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def getGooglePlaystoreServiceAccountEmail() {
    return project.hasProperty('gPlaystoreServiceAccountEmailAddress') ? gPlaystoreServiceAccountEmailAddress : ''
}

def getGooglePlaystoreServicepk12File() {
    // Set to home directory if property not set because play plugin doesn't allow empty or null
    // value for the pk file
    return project.hasProperty('gPlaystorePKFile') ? gPlaystorePKFile : '~/'
}

def buildVersionCode() {
    def versionName = android.defaultConfig.versionName
    def (major, minor, patch) = versionName.find(/^(\d+\.\d+\.\d+)/).toString().tokenize('.')
    def code = major.toInteger() * 1000000 + minor.toInteger() * 10000 + patch.toInteger() + 100
    return code
}

def readWhatsNewFile(filename) {
    File file = new File('birudo/mobile/src/main/play/en-US/' + filename);
    return file.exists() ? file.text : new File('birudo/mobile/src/main/play/en-US/whatsnew').text;
}

def trackProperty() {
    return project.hasProperty('uploadTrack') ? uploadTrack : 'alpha'
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
    }

    signingConfigs {
        releaseSign
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseSign
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def newName = outputFile.name.replace(outputFile.name, "Birudo-v" + defaultConfig.versionName + "-" + variant.buildType.name.toUpperCase() +
                        ".apk")

                output.outputFile = file("$project.buildDir/apk/" + newName)
                if (output.zipAlign) {
                    output.zipAlign.outputFile =
                            file("$project.buildDir/apk/" + newName.replace("-unaligned", ""))
                }
            }
        }
    }

    lintOptions {
        abortOnError = false
        lintConfig file("src/main/lint.xml")
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }

    packagingOptions {
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

play {
    serviceAccountEmail = getGooglePlaystoreServiceAccountEmail()
    pk12File = file(getGooglePlaystoreServicepk12File())
    uploadImages = true
    track = trackProperty()
}

release {
    grgit = Grgit.open('.')

    def tagMessage = readWhatsNewFile("whatsnew-${trackProperty()}")

    versionStrategy Strategies.PRE_RELEASE.copyWith(stages: ['alpha', 'beta', 'rc'] as SortedSet)

    android.defaultConfig.versionName = project.version.toString()

    android.defaultConfig.versionCode = buildVersionCode().toInteger()

    tagStrategy {
        generateMessage = { version -> "\n\nRelease of $version.version\n$tagMessage" }
    }
}

tasks.release.dependsOn(['build', 'publishRelease'])

// Build launch app from command line
task runApp(type: Exec, dependsOn: ['build', 'installDebug']) {
    //Linux command to launch the PostActivity when debug app is installed
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'org.addhen.birudo/.ui.activity.MainActivity'
}

if (project.hasProperty('releaseKeyStore') &&
        project.hasProperty('releaseKeyPassword') &&
        project.hasProperty('releaseKeyStorePassword') &&
        project.hasProperty('releaseKeyAlias')) {
    android.signingConfigs.releaseSign.keyAlias = releaseKeyAlias
    android.signingConfigs.releaseSign.storeFile = file(releaseKeyStore)
    android.signingConfigs.releaseSign.storePassword = releaseKeyStorePassword
    android.signingConfigs.releaseSign.keyPassword = releaseKeyPassword
} else {
    android.signingConfigs.releaseSign.keyAlias ""
    android.signingConfigs.releaseSign.storeFile null
    android.signingConfigs.releaseSign.storePassword ""
    android.signingConfigs.releaseSign.keyPassword ""
}

dependencies {
    def core = project(':core')
    def data = project(':data')

    compile core
    compile data

    compile fileTree(dir: 'libs', include: ['*.jar'])

    wearApp project(':birudo:wear')

    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:recyclerview-v7:22.0.0'
    compile 'com.android.support:cardview-v7:22.0.0'
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup:otto:1.3.6'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'net.danlew:android.joda:2.7.1'
    compile 'com.nispok:snackbar:2.10.6'
    apt 'com.squareup.dagger:dagger-compiler:1.2.2'

}
